services:

    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        ports:
            - 5672:5672
            - 15672:15672
        networks:
            - stk-network
    
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
        ports:
            - "9200:9200"
        networks:
            - stk-network
        environment:
            - "discovery.type=single-node"
        volumes:
            - ./elasticsearch/data:/usr/share/elasticsearch/data:rw              # Persistence data

    logstash:
        image: docker.elastic.co/logstash/logstash:7.2.0
        ports:
            - "25826:25826"
            - "5044:5044"
        networks:
            - stk-network
        volumes:
            - ./logstash/pipeline:/usr/share/logstash/pipeline:ro                # Pipeline configuration
        restart: on-failure
        depends_on:
            - elasticsearch
        
    kibana:
        image: docker.elastic.co/kibana/kibana:7.2.0
        ports:
            - "5601:5601"
        networks:
            - stk-network
        restart: on-failure
        depends_on:
            - elasticsearch
            
    filebeat:
        image: docker.elastic.co/beats/filebeat:7.2.0
        volumes:
          - ./filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro # Configuration file
          - /var/lib/docker/containers:/var/lib/docker/containers:ro           # Docker logs
          - /var/run/docker.sock:/var/run/docker.sock:ro                       # Additional information about containers
          - ./filebeat/data:/usr/share/filebeat/data:rw                        # Persistence data
        user: root                                                             # Allow access to log files and docker.sock
        restart: on-failure
        networks:
            - stk-network
        depends_on:
          - logstash
          
    cloud-config-server:
        container_name: cloud-config-server
        build:
            context: ./cloud-config-server
            dockerfile: Dockerfile
        image: cloud-config-server:latest
        expose:
            - 8088
        ports:
            - 8088:8088
        networks:
            - stk-network
    
    service-registry:
        container_name: service-registry
        build:
            context: ./service-registry
            dockerfile: Dockerfile
        image: service-registry:latest
        expose:
            - 8761
        ports:
            - 8761:8761
        networks:
            - stk-network

    company-service:
        container_name: company-service
        build:
            context: ./company-service
            dockerfile: Dockerfile
        image: company-service:latest
        environment:
              SPRING_CONFIG_IMPORT: cloudconfigserver:http://cloud-config-server:8088/
              EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
        expose:
            - 8085
        ports:
            - 8085:8085
        labels:
              collect_logs_with_filebeat: "true"
              decode_log_event_to_json_object: "true"
        networks:
            - stk-network
        links:
            - cloud-config-server
            - service-registry
        depends_on:
            - cloud-config-server
            - service-registry
            - db
        
    stock-service:
        container_name: stock-service
        build:
            context: ./stock-service
            dockerfile: Dockerfile
        image: stock-service:latest
        environment:
              SPRING_CONFIG_IMPORT: cloudconfigserver:http://cloud-config-server:8088/
              EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
        expose:
            - 8086
        ports:
            - 8086:8086
        networks:
            - stk-network
        links:
            - cloud-config-server:cloud-config-server
            - service-registry:service-registry
        depends_on:
            - cloud-config-server
            - service-registry
            - mongo_db
        labels:
              collect_logs_with_filebeat: "true"
              decode_log_event_to_json_object: "true"
    api-gateway:
        container_name: api-gateway
        build:
            context: ./Api-Gateway
            dockerfile: Dockerfile
        image: api-gateway:latest
        environment:
              SPRING_CONFIG_IMPORT: cloudconfigserver:http://cloud-config-server:8088/
              EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://service-registry:8761/eureka/
        expose:
            - 8082
        ports:
            - 8082:8082
        networks:
            - stk-network
        links:
            - cloud-config-server:cloud-config-server
            - service-registry:service-registry
        depends_on:
            - cloud-config-server
            - service-registry
            
    db:
        image: mysql:8.0.21
        ports:
            - "3396:3306"
        environment:
            MYSQL_ROOT_PASSWORD: root
        volumes:
            - ./db:/docker-entrypoint-initdb.d/:ro
        networks:
            - stk-network
            
    mongo_db:
        image: mongo:latest
        container_name: mongo_db
        restart: always
        ports:
            - 27017:27017
        networks:
            - stk-network
        
networks:
    stk-network:
        driver: bridge