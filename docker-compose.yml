services:

    rabbitmq:
        image: rabbitmq:3-management
        container_name: rabbitmq
        ports:
            - 5672:5672
            - 15672:15672
        networks:
            - stk-network
    
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
        container_name: elasticsearch
        ports:
            - "9200:9200"
        networks:
            - stk-network
        environment:
            - "discovery.type=single-node"
            - XPACK_SECURITY_ENABLED=false
            - XPACK_REPORTING_ENABLED=false
            - XPACK_MONITORING_ENABLED=false
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - ./elasticsearch/data:/usr/share/elasticsearch/data:rw              # Persistence data
            - ./elasticsearch/conf/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

    logstash:
        image: docker.elastic.co/logstash/logstash:7.2.0
        container_name: logstash
        command: logstash -f /usr/share/logstash/pipeline/logstash.conf
        ports:
            - "25826:25826"
            - "5044:5044"
        networks:
            - stk-network
        environment:
            - "discovery.type=single-node"
            - XPACK_SECURITY_ENABLED=false
            - XPACK_REPORTING_ENABLED=false
            - XPACK_MONITORING_ENABLED=false
            - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
        volumes:
            - ./logstash/pipeline:/usr/share/logstash/pipeline:ro                # Pipeline configuration
            - ./logstash/pipeline/logstash.yml:/usr/share/logstash/config/logstash.yml
            - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
        restart: on-failure
        depends_on:
            - elasticsearch
        
    kibana:
        image: docker.elastic.co/kibana/kibana:7.2.0
        container_name: kibana
        ports:
            - "5601:5601"
        networks:
            - stk-network
        volumes: 
            - ./kibana/conf/kibana.yml:/usr/share/kibana/config/kibana.yml
        restart: on-failure
        depends_on:
            - elasticsearch
            
    filebeat:
        image: docker.elastic.co/beats/filebeat:7.2.0
        container_name: filebeat
        volumes:
          - ./filebeat/filebeat.docker.yml:/usr/share/filebeat/filebeat.yml:ro # Configuration file
          - /var/lib/docker/containers:/var/lib/docker/containers:ro           # Docker logs
          - /var/run/docker.sock:/var/run/docker.sock:ro                       # Additional information about containers
          - ./filebeat/data:/usr/share/filebeat/data:rw                        # Persistence data
          - ./filebeat/logs:/usr/share/filebeat/dockerlogs
        user: root                                                             # Allow access to log files and docker.sock
        restart: on-failure
        networks:
            - stk-network
        depends_on:
          - logstash
          
    cloud-config-server:
        container_name: cloud-config-server
        build:
            context: ./cloud-config-server
            dockerfile: Dockerfile
        image: cloud-config-server:latest
        environment:
            SPRING_APPLICATION_JSON: '{"eureka":{"client":{"serviceUrl":{"defaultZone":"http://service-registry:8761/eureka"}}}}'
        expose:
            - 8088
        ports:
            - 8088:8088
        networks:
            - stk-network
    
    service-registry:
        container_name: service-registry
        build:
            context: ./service-registry
            dockerfile: Dockerfile
        image: service-registry:latest
        expose:
            - 8761
        ports:
            - 8761:8761
        networks:
            - stk-network

    company-service:
        container_name: company-service
        build:
            context: ./company-service
            dockerfile: Dockerfile
        image: company-service:latest
        environment:
            SPRING_DATASOURCE_URL : jdbc:mysql://mysql-db:3306/marketplace?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false
            SPRING_DATASOURCE_USERNAME : root
            SPRING_DATASOURCE_PASSWORD : root
            SPRING_RABBITMQ_HOST : rabbitmq
            SPRING_APPLICATION_JSON: '{"spring":{"config":{"import":"configserver:http://cloud-config-server:8088/"}}}'
            SPRING_APPLICATION_JSON: '{"eureka":{"client":{"serviceUrl":{"defaultZone":"http://service-registry:8761/eureka"}}}}'
        expose:
            - 8089
        ports:
            - 8089:8089
        labels:
              collect_logs_with_filebeat: "true"
              decode_log_event_to_json_object: "true"
        networks:
            - stk-network
        links:
            - cloud-config-server
            - service-registry
        depends_on:
            - cloud-config-server
            - service-registry
            - mysql-db
            - rabbitmq
        
    stock-service:
        container_name: stock-service
        build:
            context: ./stock-service
            dockerfile: Dockerfile
        image: stock-service:latest
        environment:
            SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: marketplace
            SPRING_DATA_MONGODB_HOST: mongo_db
            SPRING_DATA_MONGODB_PORT: 27817
            SPRING_DATA_MONGODB_URI: mongodb://mongo_db:27817/marketplace
            SPRING_DATA_MONGODB_USERNAME: dvuser
            SPRING_DATA_MONGODB_PASSWORD: dvuser
            SPRING_DATA_MONGODB_DATABASE: marketplace
            SPRING_RABBITMQ_HOST : rabbitmq
            SPRING_APPLICATION_JSON: '{"spring":{"config":{"import":"configserver:http://cloud-config-server:8088/"}}}'
            SPRING_APPLICATION_JSON: '{"eureka":{"client":{"serviceUrl":{"defaultZone":"http://service-registry:8761/eureka"}}}}'
        expose:
            - 8086
        ports:
            - 8086:8086
        networks:
            - stk-network
        links:
            - cloud-config-server:cloud-config-server
            - service-registry:service-registry
        depends_on:
            - cloud-config-server
            - service-registry
            - mongo_db
            - rabbitmq
        labels:
              collect_logs_with_filebeat: "true"
              decode_log_event_to_json_object: "true"
    api-gateway:
        container_name: api-gateway
        build:
            context: ./Api-Gateway
            dockerfile: Dockerfile
        image: api-gateway:latest
        environment:
            SPRING_APPLICATION_JSON: '{"spring":{"config":{"import":"configserver:http://cloud-config-server:8088/"}}}'
            SPRING_APPLICATION_JSON: '{"eureka":{"client":{"serviceUrl":{"defaultZone":"http://service-registry:8761/eureka"}}}}'
        expose:
            - 8082
        ports:
            - 8082:8082
        networks:
            - stk-network
        links:
            - cloud-config-server:cloud-config-server
            - service-registry:service-registry
        depends_on:
            - cloud-config-server
            - service-registry
            
    mysql-db:
        image: mysql:latest
        container_name: mysql-db
        ports:
            - "3396:3306"
        environment:
            - MYSQL_ROOT_PASSWORD=root
            - MYSQL_DATABASE=marketplace
        volumes:
            - ./db:/docker-entrypoint-initdb.d/:ro
        networks:
            - stk-network
            
    mongo_db:
        image: mongo:latest
        container_name: mongo_db
        restart: always
        ports:
            - 27017:27017
        environment:
          - MONGO_INITDB_ROOT_USERNAME=root
          - MONGO_INITDB_ROOT_PASSWORD=root
          - MONGO_INITDB_DATABASE=marketplace
          - MONGO_DB_USERNAME=dvuser
          - MONGO_DB_PASSWORD=dvuser
        networks:
            - stk-network
        
networks:
    stk-network:
        driver: bridge